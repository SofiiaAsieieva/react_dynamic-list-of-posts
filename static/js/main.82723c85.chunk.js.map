{"version":3,"sources":["api/api.js","api/posts.js","components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","components/Loader/Loader.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["BASE_URL","request","url","fetch","then","response","json","PostsList","selectUserId","selectedPostId","useState","posts","setPosts","postId","setPostId","hidePostDetails","useEffect","userId","allPosts","data","filter","post","getUserPosts","className","map","key","id","title","type","onClick","event","selectPostId","NewCommentForm","addCommentInPostDetails","name","email","body","inputValue","setInputValue","changeInput","target","value","prevState","submitForm","preventDefault","comment","newComment","Date","getTime","createdAt","String","updatedAt","method","headers","JSON","stringify","catch","error","Error","onSubmit","placeholder","onChange","Loader","PostDetails","postDetails","setPostDetails","comments","setComments","isVisibilityComments","setIsVisibilityComments","handlerCommentDelete","commentId","deleteComment","getPostDetails","getPostComments","length","hidden","App","users","setUser","setSelectUser","isSelectedPost","setIsSelectedPost","user","sort","prevUser","nextUser","findUserPost","Number","isSelectPostId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.82723c85.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import { BASE_URL } from './api';\n\nfunction request(url) {\n  return fetch(`${BASE_URL}/${url}`)\n    // eslint-disable-next-line consistent-return\n    .then((response) => {\n      if (response) {\n        return response.json();\n      }\n    });\n}\n\nexport function getUsers() {\n  const allUsers = request(`users`);\n\n  return allUsers\n    .then(users => users.data\n      .filter(user => user.id <= 10)\n      .sort((prevUser, nextUser) => prevUser.id - nextUser.id));\n}\n\nexport function getUserPosts(userId) {\n  const allPosts = request(`posts`);\n\n  if (userId) {\n    return allPosts\n      .then(response => response.data.filter(post => post.userId === userId));\n  }\n\n  return allPosts\n    .then(response => response.data);\n}\n\n// eslint-disable-next-line consistent-return\nexport const getPostDetails = (postId) => {\n  if (postId) {\n    return request(`posts/${postId}`)\n      .then(response => response.data);\n  }\n};\n\nexport const getPostComments = postId => request(`comments`)\n  .then(response => response.data.filter(comment => comment.postId === postId));\n\n/* eslint-disable */\nexport const deleteComment = (commentId) => {\n  /* eslint-enable */\n  return fetch(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' })\n    .catch((error) => {\n      throw new Error(error);\n    });\n};\n\nexport const addComment = comment => fetch(`${BASE_URL}/comments`, {\n  method: 'POST',\n  headers: {\n    'Content-type': 'application/json; charset=utf-8',\n  },\n  body: JSON.stringify({\n    id: comment.id,\n    postId: comment.postId,\n    name: comment.name,\n    email: comment.email,\n    body: comment.body,\n  }),\n})\n  .catch((error) => {\n    throw new Error(error);\n  });\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\nimport { getUserPosts } from '../../api/posts';\n\nexport const PostsList = ({ selectUserId, selectedPostId }) => {\n  const [posts, setPosts] = useState([]);\n  const [postId, setPostId] = useState(0);\n\n  const showPostDetails = (selectPostId) => {\n    selectedPostId(true, selectPostId);\n\n    setPostId(selectPostId);\n  };\n\n  const hidePostDetails = () => {\n    selectedPostId(false, 0);\n\n    setPostId(0);\n  };\n\n  useEffect(() => {\n    getUserPosts(selectUserId)\n      .then(setPosts);\n  }, [selectUserId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li\n            key={post.id}\n            className=\"PostsList__item\"\n          >\n            <div>\n              <b>\n                { `[User #${post.userId}]:` }\n              </b>\n              {post.title}\n            </div>\n\n            {(postId !== post.id)\n              ? (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={event => showPostDetails(post.id)}\n                >\n                  Open\n                </button>\n              )\n              : (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={hidePostDetails}\n                >\n                  Close\n                </button>\n              )\n            }\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  selectUserId: PropTypes.number.isRequired,\n  selectedPostId: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\nimport { addComment } from '../../api/posts';\n\nexport const NewCommentForm = ({ addCommentInPostDetails, postId }) => {\n  const [inputValue, setInputValue] = useState({\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  const clearForm = () => {\n    setInputValue({\n      name: '',\n      email: '',\n      body: '',\n    });\n  };\n\n  const changeInput = (event) => {\n    const { name, value } = event.target;\n\n    setInputValue(prevState => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  const submitForm = (event) => {\n    event.preventDefault();\n\n    const newComment = {\n      id: new Date().getTime(),\n      postId,\n      ...inputValue,\n      createdAt: String(new Date()),\n      updatedAt: String(new Date()),\n    };\n\n    addCommentInPostDetails(newComment);\n    addComment(newComment);\n    clearForm();\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={event => submitForm(event)}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={inputValue.name}\n          onChange={event => changeInput(event)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={inputValue.email}\n          onChange={event => changeInput(event)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={inputValue.body}\n          onChange={event => changeInput(event)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  addCommentInPostDetails: PropTypes.func.isRequired,\n  postId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport {\n  deleteComment,\n  getPostComments,\n  getPostDetails,\n} from '../../api/posts';\nimport { Loader } from '../Loader';\n\nexport const PostDetails = ({ postId }) => {\n  const [postDetails, setPostDetails] = useState({});\n  const [comments, setComments] = useState([]);\n  const [isVisibilityComments, setIsVisibilityComments] = useState(false);\n\n  const changeVisibilityComments = () => {\n    setIsVisibilityComments(!isVisibilityComments);\n  };\n\n  const addCommentInPostDetails = (newComment) => {\n    setComments(prevState => [...prevState, newComment]);\n  };\n\n  const handlerCommentDelete = (commentId) => {\n    deleteComment(commentId);\n\n    setComments(prevState => prevState\n      .filter(comment => comment.id !== commentId));\n  };\n\n  useEffect(() => {\n    getPostDetails(postId)\n      .then(setPostDetails);\n\n    getPostComments(postId)\n      .then(setComments);\n  }, [postId]);\n\n  if (postDetails.length === 0) {\n    return <Loader />;\n  }\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{postDetails.title}</p>\n      </section>\n\n      {(comments.length > 0)\n        ? (\n          <>\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={changeVisibilityComments}\n            >\n              {isVisibilityComments\n                ? `Show ${comments.length} comments`\n                : `Hide ${comments.length} comments`}\n            </button>\n\n            <section\n              className=\"PostDetails__comments\"\n              hidden={isVisibilityComments}\n            >\n              <ul className=\"PostDetails__list\">\n                {comments.map(comment => (\n                  <li\n                    key={comment.id}\n                    className=\"PostDetails__list-item\"\n                  >\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={event => handlerCommentDelete(comment.id)}\n                    >\n                      X\n                    </button>\n                    <p>{comment.body}</p>\n                  </li>\n                ))}\n              </ul>\n            </section>\n\n            <section hidden={isVisibilityComments}>\n              <div className=\"PostDetails__form-wrapper\">\n                <NewCommentForm\n                  addCommentInPostDetails={addCommentInPostDetails}\n                  postId={postId}\n                />\n              </div>\n            </section>\n          </>\n        )\n        : <Loader />\n      }\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/posts';\n\nconst App = () => {\n  const [users, setUser] = useState([]);\n  const [selectUserId, setSelectUser] = useState(0);\n  const [postId, setPostId] = useState(0);\n  const [isSelectedPost, setIsSelectedPost] = useState(false);\n\n  const findUserPost = (event) => {\n    const { value } = event.target;\n\n    setSelectUser(value);\n  };\n\n  const selectedPostId = (isSelectPostId, selectPostId) => {\n    setIsSelectedPost(isSelectPostId);\n    setPostId(selectPostId);\n  };\n\n  useEffect(() => {\n    getUsers()\n      .then(setUser);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            name=\"selectUserId\"\n            value={selectUserId}\n            onChange={event => findUserPost(event)}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectUserId={Number(selectUserId)}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        {isSelectedPost && (\n          <div className=\"App__content\">\n            <PostDetails\n              postId={postId}\n            />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}